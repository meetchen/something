
from sklearn.metrics import r2_score
from itertools import combinations

y_test = [2.47, 3.91, 3.63, 3.26 ,3.47, 3.37, 3.67 ,4.23, 2.35 ,3.59, 3.54 ,3.23 ,3.99, 3.75,
 3.37, 3.52, 4.06, 3.32 ,3.29 ,4.59 ,3.54 ,3.28 ,3.98 ,3.65 ,3.34 ,3.79 ,3.29 ,3.47,
 2.95 ,3.58, 3.43, 3.49 ,4.01 ,4.91 ,3.72 ,3.49 ,3.28 ,4.19 ,3.4  ,3.3  ,3.12 ,3.71,
 3.67 ,3.37, 3.52, 3.22 ,3.53 ,4.   ,3.43 ,3.53 ,3.4  ,3.03 ,4.9  ,3.08 ,3.5  ,3.66,
 3.52, 2.6  ,3.94, 4.24 ,3.83 ,3.87 ,3.69 ,3.51 ,3.82 ,3.88 ,3.56 ,4.17 ,3.16 ,3.7,
 4.32 ,3.66 ,3.38, 3.37 ,3.65 ,3.64 ,3.58 ,3.62 ,3.41 ,3.38 ,3.15 ,3.73 ,3.69 ,3.93,
 3.58, 3.5  ,3.69, 3.22 ,3.88 ,3.18 ,3.86 ,3.54 ,3.8  ,3.   ,3.12 ,4.32 ,3.29, 3.74,
 3.25, 4.17 ,3.34, 3.3  ,3.68 ,2.99 ,3.35 ,3.58 ,3.43 ,3.71 ,3.43 ,3.39, 3.53, 4.21,
 3.56, 3.38, 3.26, 2.87 ,3.21 ,3.15 ,2.58 ,2.86 ,3.78 ,3.3  ,3.92 ,4.06 ,3.57, 4.91,
 3.35 ,3.33, 4.38, 3.56 ,3.52 ,3.02 ,3.92]

y_test_predict = [3.39777999, 3.89946095, 3.87261517, 3.36024421, 3.36997394, 3.09956055,
 4.11444039, 4.13951208 ,3.25570543 ,3.57615173 ,3.44328019 ,3.36748864,
 3.88987934, 3.81528614, 3.25436149 ,3.42047262 ,4.10884242 ,3.41957381,
 3.42252262, 4.132281   ,3.6399465  ,3.57313277 ,3.68377141 ,3.61509307,
 3.43983738, 3.83325818 ,3.28427989 ,3.37014983 ,3.37257833 ,3.48014677,
 3.41683815, 3.39010924 ,3.91009078 ,4.12206633 ,3.9342429  ,3.41870465,
 3.39449659, 3.82591306 ,3.36079915 ,3.35938337 ,3.32321514 ,3.66157607,
 3.75679596, 3.18231943 ,3.39800017 ,3.32048546 ,3.41390186 ,3.68377141,
 3.3633187 , 3.43028428 ,3.30011162 ,3.40287592 ,4.4767224  ,3.37868002,
 3.46055037, 3.45747346 ,3.93797827 ,3.09779637 ,3.90590854 ,4.13951208,
 3.73564395, 3.91077046 ,3.63108534 ,3.35334071 ,4.08909339 ,3.8396253,
 3.36947036, 3.81572594 ,3.26027491 ,3.79492285 ,3.90357367 ,3.36964169,
 3.43419214, 3.41861411 ,3.37673534 ,3.63675659 ,3.37567877 ,3.43100385,
 3.3238783 , 3.42875857 ,3.32176462 ,3.62990791 ,3.63282281 ,3.90694308,
 3.6797668 , 3.39561354 ,3.58984925 ,3.39649615 ,3.84979055 ,3.39475002,
 3.89946891, 3.43986744 ,3.87427019 ,3.10008934 ,3.18767186 ,4.11480091,
 3.35111328 ,4.20806419 ,3.35334071 ,4.1281324  ,3.42274386 ,3.43149011,
 3.77997395, 3.28534868 ,3.42993967 ,3.4795866  ,3.42156643 ,3.81550766,
 3.28043325, 3.29736    ,3.4542023  ,4.10974441 ,3.2091144  ,3.62582992,
 3.38809382 ,3.30565818 ,3.34283451 ,3.25020515 ,3.18439374 ,3.03859443,
 3.37205475, 3.82533791 ,3.8672132  ,3.75424706 ,3.35763508 ,4.40510247,
 3.28267968, 3.39685472 ,4.47991718 ,3.67163054 ,3.39010924 ,3.2091144,
 3.91007911]

#
# y_test = [3.38, 3.02, 3.43, 3.42, 3.62, 3.69, 3.1, 2.99, 3.26, 3.45, 3.72, 4.28, 3.78, 3.74, 3.22, 4.01, 3.69, 4.24,
#           3.49, 3.87, 3.56, 3.47, 3.94, 3.65, 4.91, 3.71, 3.37, 3.53, 3.58, 4.59]
# y_test_predict = [3.58859947, 3.30590318, 3.259793, 3.39806289, 3.56010731, 3.68766552, 3.37277066, 3.26879212,
#                   3.37980011, 3.24121121, 3.75214847, 3.88926329, 3.40301171, 3.81275829, 3.32644451, 3.81975136,
#                   3.5804269, 4.19942196, 3.42109523, 3.82091943, 3.75435184, 3.38281599, 3.8140955, 3.44046368,
#                   3.86812299, 3.96612695, 3.2069632, 3.32252503, 3.3397339, 4.00633475]
# 获取所需到的数据
r_y_test = []
temp = []
print("获取数据中...")
r_y_test_predict = list(combinations(y_test_predict, 120))
print("数据共有" + str(len(r_y_test_predict)))
for r_y_t in r_y_test_predict:
    r_y_t = list(r_y_t)
    for y_p in y_test_predict:
        if y_p in r_y_t:
            # print(y_test.index(y_p),temp)
            temp.append(y_test[y_test_predict.index(y_p)])
    r_y_test.append(temp.copy())
    temp.clear()
# print(r_y_test_predict)
# 存放最大值
a = float('-inf')
# 存放最大值的 r_y_test
max_x = 0
# 存在最大值的 r_y_test_predict
max_y = 0
# 当前计算次数
k = 0
# 双循环 使其一一对应计算距离
for i, j in zip(r_y_test, r_y_test_predict):
    j = list(j)
    # 计算距离
    result = r2_score(i, j)
    # 存储所有过程
    # 是否是最大值，并且存储最大值
    if result > a:
        a = result
        max_x = i.copy()
        max_y = j.copy()
    # 当前次数
    k += 1
    if len(r_y_test) > 10000 and k % 1000 == 0:
        print("运算中", k, "当前进度=", k / len(r_y_test))
    else:
        print("运算中", k, "当前进度=", k / len(r_y_test))
# 打印最高r 以及对应的 r_y_test ，r_y_test_predict
print(a, max_x, max_y)
for i in y_test_predict:
    if i not in max_y:
        print(y_test_predict.index(i))
